#!/usr/bin/env python3

# Run a benchmark once using the same options as benchcomp.

import argparse
import os.path
import platform
import subprocess
import sys
import tempfile
import time

LibDir = os.path.join(os.path.dirname(__file__), 'lib')
sys.path.insert(0, LibDir)

import android
from build import Build
from perf import *
from test import *
import gcprofile

def main():
    args = parseArgs()
    build = buildToTest(args)
    test = testToRun(args)
    if args.android:
        android.init([build], [test], args)
    runBenchmark(build, test, args)

def parseArgs():
    parser = argparse.ArgumentParser(
        description='Run benchmarks and compare the results interactively')
    parser.add_argument('-t', '--test', help='Test suite to run')
    parser.add_argument('--gc-profile', action='store_true')
    parser.add_argument('--sys-usage', action='store_true')
    parser.add_argument('--perf', action='store_true')
    parser.add_argument('--numa',
                        action='store_true',
                        help='Bind CPU and memory to NUMA node 1')
    parser.add_argument('--args',
                        default='',
                        help='Extra arguments passed to every build')
    parser.add_argument('--gc-param',
                        default='',
                        help='Set a GC parameter for every build')
    parser.add_argument('--android',
                        action='store_true',
                        help='Run benchmarks on connected Android device')
    parser.add_argument('--perfetto', action='store_true', help='Run perfetto')
    parser.add_argument('build', nargs=1)
    return parser.parse_args()

def buildToTest(args):
    build = Build(args.build[0])

    if args.args:
        extra_args = args.args.split()
        build.args.extend(extra_args)

    if args.gc_param:
        extra_args = ['--gc-param', args.gc_param]
        build.args.extend(extra_args)

    return build

def testToRun(args):
    allTests = getKnownTests()

    if not args.test:
        sys.exit("No test specified")

    tests = list(filter(lambda t: t.name == args.test, allTests))
    if len(tests) > 1:
        sys.exit("Ambiguous test filer")

    if tests:
        return tests[0]

    return [LocalTest(args.test)]

# todo: share this code with benchcomp
def runBenchmark(build, test, args):
    cmd = [build.shell] + build.args + [test.script] + test.args
    env = dict()

    profilePath = None
    if args.gc_profile:
        if args.android:
            profilePath = android.getProfilePath()
        else:
            temp = tempfile.NamedTemporaryFile(delete=False)
            temp.close()
            profilePath = temp.name
        env['JS_GC_PROFILE'] = '0'
        env['JS_GC_PROFILE_NURSERY'] = '0'
        env['JS_GC_PROFILE_FILE'] = profilePath

    if args.numa:
        cmd = ['numactl', '--cpunodebind=1', '--localalloc', '--'] + cmd

    if args.sys_usage:
        flag = "-l" if platform.system() == "Darwin" else "-v"
        path = "/system/bin" if args.android else "/usr/bin"
        cmd = [f'{path}/time', flag] + cmd
    elif args.perf:
        cmd = updateCommandForPerf(args, cmd)

    if not args.android:
        # On Android pausing scales down CPU frequency for inactivity.
        time.sleep(0.2)

    if args.perfetto:
        assert args.android

        # Needed only on Android 9 (P) and 10 (Q) on non-Pixel phones.
        # android.remoteShell(['setprop', 'persist.traced.enable', '1'])

        destPath = "/data/misc/perfetto-traces/"
        perfettoPath = os.path.join(destPath, 'trace.pftrace')
        android.remoteShell(['rm', '-f', perfettoPath])
        cats = ['sched', 'freq', 'idle', 'memory']
        android.remoteShell(['perfetto', '-d', '-o', perfettoPath, '-t', '5s'] + cats)

    if args.android:
        stdout, stderr = android.runRemote(build, test.dir, cmd, env)
    else:
        oldcwd = os.getcwd()
        os.chdir(test.dir)

        proc = subprocess.run(cmd, env=env, capture_output=True, text=True)
        if proc.returncode != 0:
            print(
                f"Error running benchmark {test.name} with shell {build.shell}:"
            )
            print(' '.join(cmd))
            print(f"Command exited with return code {proc.returncode}")
            print(proc.stderr)
            sys.exit(1)
        stdout, stderr = proc.stdout, proc.stderr

        os.chdir(oldcwd)

    if stdout:
        print(stdout)
    if stderr:
        print(stderr)

    if profilePath:
        if args.android:
            profileData = android.readProfile(profilePath)
        else:
            with open(profilePath) as f:
                profileData = f.read()
            os.remove(profilePath)
        print(profileData)

main()
